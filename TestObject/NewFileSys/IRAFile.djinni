@import "IRAFileStream.djinni"

IRAFile = interface{

    #在此文件路径位置创建一个空文件。
    #文件存在时候强制覆盖原来的文件。
    #@return 如果成功则返回true， 失败则返回false。
    create():bool;

    #删除此文件路径的文件。
    #@return 成功则返回true， 失败则返回false。
    delete():bool;

    #测试此路径名表示的文件或目录是否存在。
    exists():bool;

    #在当前位置创建文件夹。
    makedir():bool;

    #将此文件copy到指定位置
    #如果目标位置已经存在文件则直接覆盖。
    #如果此是目录，则直接返回失败。
    #@return 如果拷贝成功则返回true， 否则返回false。
    copy(destPath:string):bool;

    #将此文件、目录移动到目标位置，如果目标位置已经存在文件则直接覆盖。
    #@return 如果移动成功则返回true， 否则返回false。
    move(destPath:string):bool;
    
    #Path()文件的绝对路径。
    #如果是目录，最后不包含斜杠。
    getPath():string;

    #返回此路径名的父路径名的抽象路径名
    #返回值最后不包含斜杠
    #如果此路径名没有指定父目录，则返回 null。
    getParent():string;

    #返回由此文件或目录的名称。
    getName():string;

    #文件大小
    #@return 返回文件的体积
    size():i64;

    #返回一个文件数组，
    #这些路径名表示此抽象路径名所表示目录中的文件。
    #如果是一个文件，则返回NULL。
    listFiles():list<IRAFile>;

    #判断是一个文件还是一个目录。
    #@return 如果是一个目录则返回True，否则返回False。
    isDirectory():bool;

    #读取文件的二进制内容。
    #打开文件，并将文件内容以二进制返回， 之后关闭文件。
    #如果文件读取失败， 或此文件是一个目录则返回一个NULL。
    readAllBytes():binary;

    #将二进制数据写入文件。
    #打开文件，并将data对应的二进制数据写入文件， 之后关闭文件。
    #写入成功后，文件的原内容将被覆盖。
    #如果写入文件失败，则返回false， 否则返回true。
    writeAllBytes(data:binary):bool;

    #获取文件的创建时间。(自1970年1月1日午夜起的毫秒数)
    #@return 文件的创建时间，如果没有创建时间则返回-1。
    getCreateTime():i64;

    #获取文件的修改时间。(自1970年1月1日午夜起的毫秒数)
    #@return 文件的修改时间，如果没有修改时间则返回-1。
    getLastModifiedTime():i64;

    #获取文件的访问时间。(自1970年1月1日午夜起的毫秒数)
    #@return 文件的访问时间，如果没有访问时间则返回-1。
    getLastAccessTime():i64;

    #打开一个文件流
    #@return 返回所打开的文件流，如果失败则返回NULL。
    openFileSteam():IRAFileStream;
}
